[{"content":"一、介绍 在有背景和明确目的的情况下，一个决策的制定，往往会依赖于多个环境条件或其衍生条件，各个条件间可能互相影响和依赖，而随机森林就是将各个条件对结果的影响具象化表现。\n二、组成 从一个简单的例子开始：\n1 和女朋友约会，需要到达约会地点。 上面这个描述中，我们可以很清楚的知道。背景是约会，而目则是到达约会地点。\n基于正常情况（不考虑外星人），实现这个目标，我们有以下策略：\n公共交通 步行 自驾 打车 骑车 那么如何选择策略呢？可能有以下几个因素：\n天气 时间宽裕程度 交通便利性 目的地类型 约会计划 不同的条件会产生不同的决策，而不同的人基于自身因素也会对不同的条件产生不同的权重。各种权重和条件互相影响，最终导致选择了某一个决策。\n一个决策的产生，由环境背景、目标、条件及衍生条件、实现方案组成。\n而这些元素的定义域与值域组成了随机森林，使用随机森林可以预测在特定元素条件下最合适的决策。\n常用方法 ","permalink":"https://morz.cc/posts/ml/decision-tree/","summary":"一、介绍 在有背景和明确目的的情况下，一个决策的制定，往往会依赖于多个环境条件或其衍生条件，各个条件间可能互相影响和依赖，而随机森林就是将各个条件对结果的影响具象化表现。\n二、组成 从一个简单的例子开始：\n1 和女朋友约会，需要到达约会地点。 上面这个描述中，我们可以很清楚的知道。背景是约会，而目则是到达约会地点。\n基于正常情况（不考虑外星人），实现这个目标，我们有以下策略：\n公共交通 步行 自驾 打车 骑车 那么如何选择策略呢？可能有以下几个因素：\n天气 时间宽裕程度 交通便利性 目的地类型 约会计划 不同的条件会产生不同的决策，而不同的人基于自身因素也会对不同的条件产生不同的权重。各种权重和条件互相影响，最终导致选择了某一个决策。\n一个决策的产生，由环境背景、目标、条件及衍生条件、实现方案组成。\n而这些元素的定义域与值域组成了随机森林，使用随机森林可以预测在特定元素条件下最合适的决策。\n常用方法 ","title":"随机森林"},{"content":"头肩顶 头肩底 上升三角 下降三角 等边三角 旗形 箱体 缺口 ","permalink":"https://morz.cc/posts/quant/illustrator/","summary":"头肩顶 头肩底 上升三角 下降三角 等边三角 旗形 箱体 缺口 ","title":"技术面基本图形"},{"content":"MACD 量价位图 加权平均线 K线 ","permalink":"https://morz.cc/posts/quant/factor/","summary":"MACD 量价位图 加权平均线 K线 ","title":"技术面基本指标"},{"content":"一些常用配置文件类型介绍 适用场景只是个建议，理论来说，所有场景都行（力大砖飞，手动无敌）\n但是合适的场景会更省心一点。\n后缀为默认后缀，本质上都是文本类型文件，一般服务器上都是叫.conf,具体看打开之后的格式。\nini 介绍：最早的配置文件格式，解析简单，由win开始广泛使用\n后缀：.ini\n适用：层次简单的配置项，一般只有一层嵌套。\n1 2 3 4 5 6 7 ; 注释用分号表示，由节、键、值 组成 ; 节类似于作用域，没有明确的结尾， [sction1] ; 节 key=vaue ; 键=值 [sction2] ; 第二个节开始 key=vaue ; 键=值 xml 介绍：最严格，程序解析简单，但是由于存在大量的关闭标签，导致新增配置项比较麻烦，配置效率低\n后缀：.xml\n建议：适用于默认配置或者存在自动格式化的场景(如果愿意手动对齐，放在服务器也是极好的)\n1 2 3 4 5 6 7 8 9 \u0026lt;!-- 注释是文本需要被左右两边包裹 --\u0026gt; \u0026lt;!-- 配置由节点组成，节点下可以是数值，也可以是节点，但是选择一种 --\u0026gt; \u0026lt;key\u0026gt; \u0026lt;aaa\u0026gt;v1\u0026lt;/aaa\u0026gt; \u0026lt;aaa\u0026gt;v2\u0026lt;/aaa\u0026gt; \u0026lt;bbb\u0026gt; \u0026lt;ccc\u0026gt;ccc\u0026lt;/ccc\u0026gt; \u0026lt;/bbb\u0026gt; \u0026lt;/key\u0026gt; property 介绍：主流配置方式，一行一个,结构简单，程序读取方便，存在嵌套结构时会出现大量重复前缀\n后缀：.property\n建议：比较适用于在服务器环境，或者简单基础配置解析的场景，适合配置项的新增和删除\n1 2 3 4 5 # 以#开始的行为注释行 a=1 a.b.a=2 a.b.a=3 b=3 yml 介绍：可读性很强,程序解析简单，但是配置层次关系依赖于缩进（注意：冒号后要空一格）\n后缀：.yml\n建议：适用于层次结构复杂，仅修改配置值，或者是有完善的格式化环境。\n1 2 3 4 5 6 7 8 9 10 11 # 以#开始的行为注释行 # 使用 - 来标记列表 key: a: v1 b: v2 list: - s1 - s2 map: k1: v1 k2: v2 toml 介绍：据说是yml的升级版本，像ini和yml的结合,语法有点多\n后缀：.toml\n建议：昂，我不用这个，不知道怎么建议，看这个语法就不想用，比较懒。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 a = \u0026#34;a\u0026#34; b = \u0026#34;b\u0026#34; c.x = \u0026#34;c.x\u0026#34; c.y = \u0026#34;c.y\u0026#34; [d] x = \u0026#34;d.x\u0026#34; y = \u0026#34;d.y\u0026#34; [[e]] x = \u0026#34;e[0].x\u0026#34; y = \u0026#34;e[0].y\u0026#34; hocon 介绍：伸缩性强，能表述组，复杂层次结构，xml的简化版本，也可以直接降级为property 后缀: .conf\n建议：有大块的配置很适合，分组很清晰，多叉多级的复杂配置建议使用这个。\n1 2 3 4 5 6 7 8 9 10 11 g1:{ g11:{ } g12={ } g13{ } g14:123 g15=456 } ","permalink":"https://morz.cc/posts/technology/utils/config/","summary":"一些常用配置文件类型介绍 适用场景只是个建议，理论来说，所有场景都行（力大砖飞，手动无敌）\n但是合适的场景会更省心一点。\n后缀为默认后缀，本质上都是文本类型文件，一般服务器上都是叫.conf,具体看打开之后的格式。\nini 介绍：最早的配置文件格式，解析简单，由win开始广泛使用\n后缀：.ini\n适用：层次简单的配置项，一般只有一层嵌套。\n1 2 3 4 5 6 7 ; 注释用分号表示，由节、键、值 组成 ; 节类似于作用域，没有明确的结尾， [sction1] ; 节 key=vaue ; 键=值 [sction2] ; 第二个节开始 key=vaue ; 键=值 xml 介绍：最严格，程序解析简单，但是由于存在大量的关闭标签，导致新增配置项比较麻烦，配置效率低\n后缀：.xml\n建议：适用于默认配置或者存在自动格式化的场景(如果愿意手动对齐，放在服务器也是极好的)\n1 2 3 4 5 6 7 8 9 \u0026lt;!-- 注释是文本需要被左右两边包裹 --\u0026gt; \u0026lt;!-- 配置由节点组成，节点下可以是数值，也可以是节点，但是选择一种 --\u0026gt; \u0026lt;key\u0026gt; \u0026lt;aaa\u0026gt;v1\u0026lt;/aaa\u0026gt; \u0026lt;aaa\u0026gt;v2\u0026lt;/aaa\u0026gt; \u0026lt;bbb\u0026gt; \u0026lt;ccc\u0026gt;ccc\u0026lt;/ccc\u0026gt; \u0026lt;/bbb\u0026gt; \u0026lt;/key\u0026gt; property 介绍：主流配置方式，一行一个,结构简单，程序读取方便，存在嵌套结构时会出现大量重复前缀\n后缀：.property\n建议：比较适用于在服务器环境，或者简单基础配置解析的场景，适合配置项的新增和删除\n1 2 3 4 5 # 以#开始的行为注释行 a=1 a.","title":"各种各样的配置文件类型"},{"content":"背景 toB业务，最终交付的是一个客户端（jar），现在需要将其\n","permalink":"https://morz.cc/posts/technology/web/all-in-one/","summary":"背景 toB业务，最终交付的是一个客户端（jar），现在需要将其","title":"整合react到spring中"},{"content":"简介 用于记录一些乱七八糟的Widget（速查表）\n布局 Expanded 可以设置元素的占用空间比例大小。\n1 2 3 4 5 const Expanded({ Key key, int flex = 1, @required Widget child, }) flex 占比大小，默认是100% 多个Expanded并列时，单个Expanded占用空间为flex/sum(flex) child 即需要分配的Widget 例子:参考博客\n","permalink":"https://morz.cc/posts/technology/flutter/widget/","summary":"简介 用于记录一些乱七八糟的Widget（速查表）\n布局 Expanded 可以设置元素的占用空间比例大小。\n1 2 3 4 5 const Expanded({ Key key, int flex = 1, @required Widget child, }) flex 占比大小，默认是100% 多个Expanded并列时，单个Expanded占用空间为flex/sum(flex) child 即需要分配的Widget 例子:参考博客","title":"Widget记录"},{"content":"简介 正所谓，Flutter不能失去GetX，就像西方不是失去耶路撒冷。GetX作为Flutter的轮椅般的存在，是使用Flutter中必不可少的一个组件。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\nGitHub Pub Pub上的文档挺全的\n使用 ","permalink":"https://morz.cc/posts/technology/flutter/get/","summary":"简介 正所谓，Flutter不能失去GetX，就像西方不是失去耶路撒冷。GetX作为Flutter的轮椅般的存在，是使用Flutter中必不可少的一个组件。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\nGitHub Pub Pub上的文档挺全的\n使用 ","title":"GetX使用说明"},{"content":"现象 在本地运行测试好好的，发布到托管环境格式就乱了。\n检查 打开控制台后，发现console下有一条报错： 说css的校验失效，导致资源被锁定。所以格式全部都乱了。\n原因 由于Linux使用的是LF作为换行符，Windows使用CRLF作为换行符号。所以在跨环境时，换行符会发生变化。\n而由于hugo是每次都会重新生成css，导致跨环境之后的校验失效。\n解决方案 不跨环境（这不是废话） 找到校验的代码，我的是在这里，themes/PaperMod/layouts/partials/head.html\n当然，不同的主题可能位置不一样，但是结构应该和下面类似： 找到后有两个方法： 可以直接将74行的代码复制到第72行（也就是去掉了integrity校验） 也可以基于70行的判断，在项目配置文件中添加 params.assets.disableFingerprinting: true 来跳过校验 ","permalink":"https://morz.cc/posts/technology/hugo/integrity/","summary":"现象 在本地运行测试好好的，发布到托管环境格式就乱了。\n检查 打开控制台后，发现console下有一条报错： 说css的校验失效，导致资源被锁定。所以格式全部都乱了。\n原因 由于Linux使用的是LF作为换行符，Windows使用CRLF作为换行符号。所以在跨环境时，换行符会发生变化。\n而由于hugo是每次都会重新生成css，导致跨环境之后的校验失效。\n解决方案 不跨环境（这不是废话） 找到校验的代码，我的是在这里，themes/PaperMod/layouts/partials/head.html\n当然，不同的主题可能位置不一样，但是结构应该和下面类似： 找到后有两个方法： 可以直接将74行的代码复制到第72行（也就是去掉了integrity校验） 也可以基于70行的判断，在项目配置文件中添加 params.assets.disableFingerprinting: true 来跳过校验 ","title":"Hugo页面样式加载失败"},{"content":"简介 作为Flutter的半orm框架，Drift确实达到了好用的程度。本文不去对比其他框架，仅就使用过程中的一些坑或者技巧做一点小小的记录。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\n官方文档 GitHub Pub 使用 参考文档，先这样，然后这样，再那样，就好啦～\n1 2 # 注意：由于Dart不支持反射等操作，导致dao及相关类不能自动生成，需要手动执行以下指令进行生成。 $ dart run build_runner build 问题 Tables can\u0026rsquo;t override primaryKey and use autoIncrement() 设置自增就默认为主键，不用再额外指定主键了，但是指定了也只是警告，问题不大。 数据文件路径（安卓虚拟机）\n/data/user/0/{包名}/app_flutter/db.sqlite ","permalink":"https://morz.cc/posts/technology/flutter/drift/","summary":"简介 作为Flutter的半orm框架，Drift确实达到了好用的程度。本文不去对比其他框架，仅就使用过程中的一些坑或者技巧做一点小小的记录。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\n官方文档 GitHub Pub 使用 参考文档，先这样，然后这样，再那样，就好啦～\n1 2 # 注意：由于Dart不支持反射等操作，导致dao及相关类不能自动生成，需要手动执行以下指令进行生成。 $ dart run build_runner build 问题 Tables can\u0026rsquo;t override primaryKey and use autoIncrement() 设置自增就默认为主键，不用再额外指定主键了，但是指定了也只是警告，问题不大。 数据文件路径（安卓虚拟机）\n/data/user/0/{包名}/app_flutter/db.sqlite ","title":"Drift使用说明"},{"content":"前言 一直想自己搭建个博客做记录，偶然间了解到静态站。\n由于会Vue3，最开始打算使用vue-press的，但是调查发现，有三个主流的静态博客工具。也有现成的静态托管方案。\n于是乎，在对比了jekyll、hugo、hexo后，果断的选择了hugo（反正都没用过，就选星星最多的）。\n遂，域名，空间，博客一把梭。\n记录下 Hogu 的安装过程\n安装 当然是看 官方安装文档 啊，不然真的看博客啊。\n配置 配置就有得说了，官网的东西有点乱。\n使用 我还不太熟，用熟了再补充\n","permalink":"https://morz.cc/posts/technology/hugo/setup/","summary":"前言 一直想自己搭建个博客做记录，偶然间了解到静态站。\n由于会Vue3，最开始打算使用vue-press的，但是调查发现，有三个主流的静态博客工具。也有现成的静态托管方案。\n于是乎，在对比了jekyll、hugo、hexo后，果断的选择了hugo（反正都没用过，就选星星最多的）。\n遂，域名，空间，博客一把梭。\n记录下 Hogu 的安装过程\n安装 当然是看 官方安装文档 啊，不然真的看博客啊。\n配置 配置就有得说了，官网的东西有点乱。\n使用 我还不太熟，用熟了再补充","title":"安装Hugo"}]
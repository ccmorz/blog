[{"content":"背景 有个需求，要给客户批量发邮件。需要包含复杂表格，不能用excel，需要直接展示。\n最开始采用了WangEdit,简单快捷，但是表格功能不强，只能增减格子，于是又各种查，找到了ckeditor。 鉴于在实现过程中发现了很多坑，在此记录一下。\n多年老坑:\nPossible to make editor.getData() returns content with inline styles?\n环境 前端脚手架: umi node: V18 安装CkEditor CKEditor有很多插件，不同的功能通过插件实现，安装的过程，就是将插件引入项目的过程。\n打开Quick start 可以安装步骤构建一个简单的富文本编辑器。\n但是显然这个简单的文本编辑器满足不了我的需求，但是有个在线构建说明 可以满足。\\\n打开在线构建页面 选择Classic模式 然后按照需求选择插件，默认选择中的Cloud Services是高级功能，要加钱，不要可以去掉，下面右上角有PREMIUM 标记的插件也是要加钱的。 然后选择哪些按钮常驻，哪些按钮隐藏（可以添加了插件，但是展示功能入口） 选择语言 然后就可以下载拉，如果选择的插件中有高级功能，会有一个要求添加license key的提示，可以返回第二步修改 下载完成后是一个zip，解压后打开sample/index.html查看效果，如果合适，则开始引入项目。 安装必须组件 1 2 3 4 // ckeditor react 组件 yarn add @ckeditor/ckeditor5-react @ckeditor/ckeditor5-build-classic // 将class转换为内联style,发邮件的时候用 yarn add juice 将build目录下全部文件拷贝到src/components/ckeditor下,并添加CkeditorUtil.ts 和 index.tsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // CkeditorUtil.ts // 参考 https://github.com/ckeditor/ckeditor5/issues/1627 import juice from \u0026#39;juice\u0026#39;; // @ts-ignore export const CkeditorUtil = { getEditorStyles() { const cssTexts = [], rootCssTexts = []; for (const styleSheets of document.styleSheets) { // @ts-ignore if (styleSheets.ownerNode.hasAttribute(\u0026#39;data-cke\u0026#39;)) { for (const cssRule of styleSheets[\u0026#39;cssRules\u0026#39;]) { if (cssRule.cssText.indexOf(\u0026#39;.ck-content\u0026#39;) !== -1) { cssTexts.push(cssRule.cssText); } else if (cssRule.cssText.indexOf(\u0026#39;:root\u0026#39;) !== -1) { rootCssTexts.push(cssRule.cssText); } } } } return cssTexts.length ? [...rootCssTexts, ...cssTexts].join(\u0026#39; \u0026#39;).trim() : \u0026#39;\u0026#39;; }, getContentWithLineStyles(editorContent: any) { // ck-content 参考 https://ckeditor.com/docs/ckeditor5/latest/installation/advanced/content-styles.html#sharing-content-styles-between-frontend-and-backend // Important! // If you take a closer look at the content styles, you may notice they are prefixed with the .ck-content class selector. // This narrows their scope when used in CKEditor 5 so they do not affect the rest of the application. // To use them in the front–end, you will have to add the ck-content CSS class to the container of your content. // Otherwise the styles will not be applied. return juice.inlineContent(`\u0026lt;div class=\u0026#34;ck-content\u0026#34;\u0026gt;${editorContent}\u0026lt;div\u0026gt;`, this.getEditorStyles()); } }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 // index.tsx import ClassicEditor from \u0026#39;./ckeditor\u0026#39; import {CKEditor} from \u0026#39;@ckeditor/ckeditor5-react\u0026#39;; import {EventInfo} from \u0026#34;@ckeditor/ckeditor5-utils\u0026#34;; import {type Editor} from \u0026#39;ckeditor5/src/core\u0026#39; export {CkeditorUtil} from \u0026#34;./CkeditorUtil\u0026#34; interface Prop { disabled?: boolean initData?: string, onReady?: (editor: ClassicEditor) =\u0026gt; void, onBlur?: (data: string, event: EventInfo\u0026lt;string, any\u0026gt;, editor: ClassicEditor) =\u0026gt; void onFocus?: (data: string, event: EventInfo\u0026lt;string, any\u0026gt;, editor: ClassicEditor) =\u0026gt; void onChange?: (data: string, event: EventInfo\u0026lt;string, any\u0026gt;, editor: ClassicEditor) =\u0026gt; void autoSave?: (data: string, editor: Editor) =\u0026gt; void } export {ClassicEditor}; export const ContentEditor = ({disabled = false, initData, autoSave, onReady, onBlur, onFocus, onChange}: Prop) =\u0026gt; { return ( \u0026lt;CKEditor disabled={disabled} editor={ClassicEditor} config={{ autosave: { save(editor) { if (autoSave) { autoSave(editor.data.get(), editor); } return Promise.resolve(); } }, }} data={initData} onReady={editor =\u0026gt; { if (onReady) { onReady(editor); } }} onChange={(event, editor) =\u0026gt; { if (onChange) { onChange(editor.getData(), event, editor); } }} onBlur={(event, editor) =\u0026gt; { if (onBlur) { onBlur(editor.getData(), event, editor); } }} onFocus={(event, editor) =\u0026gt; { if (onFocus) { onFocus(editor.getData(), event, editor); } }} /\u0026gt; ) } 使用 配置完成后便可开始使用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import {ContentEditor, ClassicEditor, CkeditorUtil} from \u0026#39;@/components/ckeditor\u0026#39;; import {Button} from \u0026#34;antd\u0026#34;; export default function(){ const [classicEditor, setClassicEditor] = useState\u0026lt;ClassicEditor\u0026gt;() const genInlineContent = () =\u0026gt; { const originContent = classicEditor?.getData(); if (!originContent) { return; } // 将原始html转换为内联样式 // 不需要内联样式可以直接返回originContent return CkeditorUtil.getContentWithLineStyles(originContent); } const save = ()=\u0026gt;{ console.log(genInlineContent()) } return( \u0026lt;\u0026gt; \u0026lt;ContentEditor onReady={(editor) =\u0026gt; setClassicEditor(editor)}/\u0026gt; \u0026lt;Button onClick={save}\u0026gt;保存\u0026lt;/Button\u0026gt; \u0026lt;/\u0026gt; ) } ","permalink":"https://morz.cc/posts/technology/web/ckeditor-to-email/","summary":"背景 有个需求，要给客户批量发邮件。需要包含复杂表格，不能用excel，需要直接展示。\n最开始采用了WangEdit,简单快捷，但是表格功能不强，只能增减格子，于是又各种查，找到了ckeditor。 鉴于在实现过程中发现了很多坑，在此记录一下。\n多年老坑:\nPossible to make editor.getData() returns content with inline styles?\n环境 前端脚手架: umi node: V18 安装CkEditor CKEditor有很多插件，不同的功能通过插件实现，安装的过程，就是将插件引入项目的过程。\n打开Quick start 可以安装步骤构建一个简单的富文本编辑器。\n但是显然这个简单的文本编辑器满足不了我的需求，但是有个在线构建说明 可以满足。\\\n打开在线构建页面 选择Classic模式 然后按照需求选择插件，默认选择中的Cloud Services是高级功能，要加钱，不要可以去掉，下面右上角有PREMIUM 标记的插件也是要加钱的。 然后选择哪些按钮常驻，哪些按钮隐藏（可以添加了插件，但是展示功能入口） 选择语言 然后就可以下载拉，如果选择的插件中有高级功能，会有一个要求添加license key的提示，可以返回第二步修改 下载完成后是一个zip，解压后打开sample/index.html查看效果，如果合适，则开始引入项目。 安装必须组件 1 2 3 4 // ckeditor react 组件 yarn add @ckeditor/ckeditor5-react @ckeditor/ckeditor5-build-classic // 将class转换为内联style,发邮件的时候用 yarn add juice 将build目录下全部文件拷贝到src/components/ckeditor下,并添加CkeditorUtil.ts 和 index.tsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // CkeditorUtil.","title":"使用ckeditor发送邮件"},{"content":"从公钥服务器接收失败 命令：\n1 apt-key adv --keyserver keyserver.ubuntu.com --recv xxxx 错误提示：\ngpg: keyserver receive failed: Server indicated a failure\ngpg: 从公钥服务器接收失败：Server indicated a failure\n解决方案\n由于keyserver.ubuntu.com开放80端口，需要手动指定，否则会使用默认端口11371 添加协议名和端口后为： 1 apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv xxxx 如果方案1中继续报错，可能是由于域名解析失败导致，可以在/etc/resolv.conf中修改dns配置为 1 nameserver 8.8.8.8 # Google DNS 或 1 nameserver 1.1.1.1 # Cloudflare 如果不可修改DNS或者修改后依旧失败，则可以使用ping来获取keyserver.ubuntu.com的真实IP，再替换到域名 1 2 ping keyserver.ubuntu.com #获取ip，我获取的是 185.125.188.27 apt-key adv --keyserver hkp://185.125.188.27:80 --recv xxxx #使用IP替换域名 ","permalink":"https://morz.cc/posts/technology/web/gpg-tips/","summary":"从公钥服务器接收失败 命令：\n1 apt-key adv --keyserver keyserver.ubuntu.com --recv xxxx 错误提示：\ngpg: keyserver receive failed: Server indicated a failure\ngpg: 从公钥服务器接收失败：Server indicated a failure\n解决方案\n由于keyserver.ubuntu.com开放80端口，需要手动指定，否则会使用默认端口11371 添加协议名和端口后为： 1 apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv xxxx 如果方案1中继续报错，可能是由于域名解析失败导致，可以在/etc/resolv.conf中修改dns配置为 1 nameserver 8.8.8.8 # Google DNS 或 1 nameserver 1.1.1.1 # Cloudflare 如果不可修改DNS或者修改后依旧失败，则可以使用ping来获取keyserver.ubuntu.com的真实IP，再替换到域名 1 2 ping keyserver.ubuntu.com #获取ip，我获取的是 185.125.188.27 apt-key adv --keyserver hkp://185.125.188.27:80 --recv xxxx #使用IP替换域名 ","title":"gpg小记"},{"content":"一些网址 zlib\n","permalink":"https://morz.cc/posts/technology/utils/notebook/","summary":"一些网址 zlib","title":"备忘录"},{"content":"一、介绍 在有背景和明确目的的情况下，一个决策的制定，往往会依赖于多个环境条件或其衍生条件，各个条件间可能互相影响和依赖，而随机森林就是将各个条件对结果的影响具象化表现。\n二、组成 从一个简单的例子开始：\n1 和女朋友约会，需要到达约会地点。 上面这个描述中，我们可以很清楚的知道。背景是约会，而目则是到达约会地点。\n基于正常情况（不考虑外星人），实现这个目标，我们有以下策略：\n公共交通 步行 自驾 打车 骑车 那么如何选择策略呢？可能有以下几个因素：\n天气 时间宽裕程度 交通便利性 目的地类型 约会计划 不同的条件会产生不同的决策，而不同的人基于自身因素也会对不同的条件产生不同的权重。各种权重和条件互相影响，最终导致选择了某一个决策。\n一个决策的产生，由环境背景、目标、条件及衍生条件、实现方案组成。\n而这些元素的定义域与值域组成了随机森林，使用随机森林可以预测在特定元素条件下最合适的决策。\n常用方法 ","permalink":"https://morz.cc/posts/ml/random-forest/","summary":"一、介绍 在有背景和明确目的的情况下，一个决策的制定，往往会依赖于多个环境条件或其衍生条件，各个条件间可能互相影响和依赖，而随机森林就是将各个条件对结果的影响具象化表现。\n二、组成 从一个简单的例子开始：\n1 和女朋友约会，需要到达约会地点。 上面这个描述中，我们可以很清楚的知道。背景是约会，而目则是到达约会地点。\n基于正常情况（不考虑外星人），实现这个目标，我们有以下策略：\n公共交通 步行 自驾 打车 骑车 那么如何选择策略呢？可能有以下几个因素：\n天气 时间宽裕程度 交通便利性 目的地类型 约会计划 不同的条件会产生不同的决策，而不同的人基于自身因素也会对不同的条件产生不同的权重。各种权重和条件互相影响，最终导致选择了某一个决策。\n一个决策的产生，由环境背景、目标、条件及衍生条件、实现方案组成。\n而这些元素的定义域与值域组成了随机森林，使用随机森林可以预测在特定元素条件下最合适的决策。\n常用方法 ","title":"随机森林"},{"content":"头肩顶 头肩底 上升三角 下降三角 等边三角 旗形 箱体 缺口 ","permalink":"https://morz.cc/posts/quant/illustrator/","summary":"头肩顶 头肩底 上升三角 下降三角 等边三角 旗形 箱体 缺口 ","title":"技术面基本图形"},{"content":"MACD 量价位图 加权平均线 K线 ","permalink":"https://morz.cc/posts/quant/factor/","summary":"MACD 量价位图 加权平均线 K线 ","title":"技术面基本指标"},{"content":"一些常用配置文件类型介绍 适用场景只是个建议，理论来说，所有场景都行（力大砖飞，手动无敌）\n但是合适的场景会更省心一点。\n后缀为默认后缀，本质上都是文本类型文件，一般服务器上都是叫.conf,具体看打开之后的格式。\nini 介绍：最早的配置文件格式，解析简单，由win开始广泛使用\n后缀：.ini\n适用：层次简单的配置项，一般只有一层嵌套。\n1 2 3 4 5 6 7 ; 注释用分号表示，由节、键、值 组成 ; 节类似于作用域，没有明确的结尾， [sction1] ; 节 key=vaue ; 键=值 [sction2] ; 第二个节开始 key=vaue ; 键=值 xml 介绍：最严格，程序解析简单，但是由于存在大量的关闭标签，导致新增配置项比较麻烦，配置效率低\n后缀：.xml\n建议：适用于默认配置或者存在自动格式化的场景(如果愿意手动对齐，放在服务器也是极好的)\n1 2 3 4 5 6 7 8 9 \u0026lt;!-- 注释是文本需要被左右两边包裹 --\u0026gt; \u0026lt;!-- 配置由节点组成，节点下可以是数值，也可以是节点，但是选择一种 --\u0026gt; \u0026lt;key\u0026gt; \u0026lt;aaa\u0026gt;v1\u0026lt;/aaa\u0026gt; \u0026lt;aaa\u0026gt;v2\u0026lt;/aaa\u0026gt; \u0026lt;bbb\u0026gt; \u0026lt;ccc\u0026gt;ccc\u0026lt;/ccc\u0026gt; \u0026lt;/bbb\u0026gt; \u0026lt;/key\u0026gt; property 介绍：主流配置方式，一行一个,结构简单，程序读取方便，存在嵌套结构时会出现大量重复前缀\n后缀：.property\n建议：比较适用于在服务器环境，或者简单基础配置解析的场景，适合配置项的新增和删除\n1 2 3 4 5 # 以#开始的行为注释行 a=1 a.b.a=2 a.b.a=3 b=3 yml 介绍：可读性很强,程序解析简单，但是配置层次关系依赖于缩进（注意：冒号后要空一格）\n后缀：.yml\n建议：适用于层次结构复杂，仅修改配置值，或者是有完善的格式化环境。\n1 2 3 4 5 6 7 8 9 10 11 # 以#开始的行为注释行 # 使用 - 来标记列表 key: a: v1 b: v2 list: - s1 - s2 map: k1: v1 k2: v2 toml 介绍：据说是yml的升级版本，像ini和yml的结合,语法有点多\n后缀：.toml\n建议：昂，我不用这个，不知道怎么建议，看这个语法就不想用，比较懒。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 a = \u0026#34;a\u0026#34; b = \u0026#34;b\u0026#34; c.x = \u0026#34;c.x\u0026#34; c.y = \u0026#34;c.y\u0026#34; [d] x = \u0026#34;d.x\u0026#34; y = \u0026#34;d.y\u0026#34; [[e]] x = \u0026#34;e[0].x\u0026#34; y = \u0026#34;e[0].y\u0026#34; hocon 介绍：伸缩性强，能表述组，复杂层次结构，xml的简化版本，也可以直接降级为property 后缀: .conf\n建议：有大块的配置很适合，分组很清晰，多叉多级的复杂配置建议使用这个。\n1 2 3 4 5 6 7 8 9 10 11 g1:{ g11:{ } g12={ } g13{ } g14:123 g15=456 } ","permalink":"https://morz.cc/posts/technology/utils/config/","summary":"一些常用配置文件类型介绍 适用场景只是个建议，理论来说，所有场景都行（力大砖飞，手动无敌）\n但是合适的场景会更省心一点。\n后缀为默认后缀，本质上都是文本类型文件，一般服务器上都是叫.conf,具体看打开之后的格式。\nini 介绍：最早的配置文件格式，解析简单，由win开始广泛使用\n后缀：.ini\n适用：层次简单的配置项，一般只有一层嵌套。\n1 2 3 4 5 6 7 ; 注释用分号表示，由节、键、值 组成 ; 节类似于作用域，没有明确的结尾， [sction1] ; 节 key=vaue ; 键=值 [sction2] ; 第二个节开始 key=vaue ; 键=值 xml 介绍：最严格，程序解析简单，但是由于存在大量的关闭标签，导致新增配置项比较麻烦，配置效率低\n后缀：.xml\n建议：适用于默认配置或者存在自动格式化的场景(如果愿意手动对齐，放在服务器也是极好的)\n1 2 3 4 5 6 7 8 9 \u0026lt;!-- 注释是文本需要被左右两边包裹 --\u0026gt; \u0026lt;!-- 配置由节点组成，节点下可以是数值，也可以是节点，但是选择一种 --\u0026gt; \u0026lt;key\u0026gt; \u0026lt;aaa\u0026gt;v1\u0026lt;/aaa\u0026gt; \u0026lt;aaa\u0026gt;v2\u0026lt;/aaa\u0026gt; \u0026lt;bbb\u0026gt; \u0026lt;ccc\u0026gt;ccc\u0026lt;/ccc\u0026gt; \u0026lt;/bbb\u0026gt; \u0026lt;/key\u0026gt; property 介绍：主流配置方式，一行一个,结构简单，程序读取方便，存在嵌套结构时会出现大量重复前缀\n后缀：.property\n建议：比较适用于在服务器环境，或者简单基础配置解析的场景，适合配置项的新增和删除\n1 2 3 4 5 # 以#开始的行为注释行 a=1 a.","title":"各种各样的配置文件类型"},{"content":"背景 toB业务，最终交付的是一个客户端，需要提供前端控制页面，需要将前端也进行编译打包到同一个zip中，并且需要兼容jenkins，一步打包到位。\n原理 由于使用umi开发前端，所以正式使用之前先得进行编译。需要使用maven触发编译，打包为zip需要使用assembly插件\n再将js文件打包进行项目目录，由于是直接使用，没有nginx的容器， 需要spring-web充当容器，对前端资源进行转发。同时，spring-web也提供后端接口。\n实现 原理可行，开始实现\n目录结构 项目目录结构基于Maven项目，前端文件放哪都行，只要后面路径配置得一直就没啥问题。\n主要目录结构如下：\nbin \u0026hellip;启动脚本 config \u0026hellip;配置 assembly assembly.xml react(前端代码) src main \u0026hellip;其他文件 resources public \u0026hellip;其他文件 target pom.xml 配置 1. 修改umi配置输出目录 修改配置文件.umirc.ts， 添加配置项 outputPath: '../src/main/resources/public/'\n1 2 3 4 5 // .umirc.ts export default defineConfig({ // 其他配置 outputPath: \u0026#39;../src/main/resources/public/\u0026#39;, }); 2. 修改maven配置文件 添加react编译插件，用于编译umi项目 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.github.eirslett\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;frontend-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.14.0\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;nodeDownloadRoot\u0026gt;https://npm.taobao.org/mirrors/node/\u0026lt;/nodeDownloadRoot\u0026gt; \u0026lt;npmDownloadRoot\u0026gt;https://registry.npm.taobao.org/npm/-/\u0026lt;/npmDownloadRoot\u0026gt; \u0026lt;installDirectory\u0026gt;react\u0026lt;/installDirectory\u0026gt; \u0026lt;workingDirectory\u0026gt;react\u0026lt;/workingDirectory\u0026gt; \u0026lt;nodeVersion\u0026gt;v16.19.0\u0026lt;/nodeVersion\u0026gt; \u0026lt;yarnVersion\u0026gt;v1.22.10\u0026lt;/yarnVersion\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;!-- 构建时自动安装 node 和 yarn --\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;install node and yarn\u0026lt;/id\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;install-node-and-yarn\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;!-- 构建时执行 yarn install --\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;yarn install\u0026lt;/id\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;yarn\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;phase\u0026gt;generate-resources\u0026lt;/phase\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;arguments\u0026gt;install\u0026lt;/arguments\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;!-- 构建时执行 yarn build --\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;yarn build\u0026lt;/id\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;yarn\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;arguments\u0026gt;build\u0026lt;/arguments\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; 添加assembly打包插件,并且指明assembly脚本路径 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-assembly-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;make-assembly\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;single\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;skipAssembly\u0026gt;${skipAssembly}\u0026lt;/skipAssembly\u0026gt; \u0026lt;descriptors\u0026gt; \u0026lt;descriptor\u0026gt;assembly/assembly.xml\u0026lt;/descriptor\u0026gt; \u0026lt;/descriptors\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;appendAssemblyId\u0026gt;false\u0026lt;/appendAssemblyId\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; 3. 编写assembly脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 \u0026lt;assembly xmlns=\u0026#34;http://maven.apache.org/ASSEMBLY/2.1.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd\u0026#34;\u0026gt; \u0026lt;id\u0026gt;assembly\u0026lt;/id\u0026gt; \u0026lt;!-- 最终打包成一个用于发布的zip文件 --\u0026gt; \u0026lt;formats\u0026gt; \u0026lt;format\u0026gt;zip\u0026lt;/format\u0026gt; \u0026lt;/formats\u0026gt; \u0026lt;!-- 添加maven的lib依赖 --\u0026gt; \u0026lt;dependencySets\u0026gt; \u0026lt;dependencySet\u0026gt; \u0026lt;outputDirectory\u0026gt;lib\u0026lt;/outputDirectory\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependencySet\u0026gt; \u0026lt;/dependencySets\u0026gt; \u0026lt;fileSets\u0026gt; \u0026lt;!-- 把项目的本地lib依赖 ，打包进zip文件的lib --\u0026gt; \u0026lt;fileSet\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/lib\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;lib\u0026lt;/outputDirectory\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;*\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/fileSet\u0026gt; \u0026lt;!-- 把项目的脚本文件目录配置 ，打包进zip文件的conf --\u0026gt; \u0026lt;fileSet\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/config\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;config\u0026lt;/outputDirectory\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;*.*\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/fileSet\u0026gt; \u0026lt;!--添加前端--\u0026gt; \u0026lt;fileSet\u0026gt; \u0026lt;directory\u0026gt;${basedir}/src/main/resources/public\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;public\u0026lt;/outputDirectory\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;**/*\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/fileSet\u0026gt; \u0026lt;!-- 把项目的脚本文件目录中的启动脚本文件，打包进zip文件的跟目录 --\u0026gt; \u0026lt;fileSet\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/bin\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;bin\u0026lt;/outputDirectory\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;*.bat\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/fileSet\u0026gt; \u0026lt;fileSet\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/bin\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;bin\u0026lt;/outputDirectory\u0026gt; \u0026lt;directoryMode\u0026gt;0777\u0026lt;/directoryMode\u0026gt; \u0026lt;fileMode\u0026gt;0777\u0026lt;/fileMode\u0026gt; \u0026lt;lineEnding\u0026gt;unix\u0026lt;/lineEnding\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;*.sh\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/fileSet\u0026gt; \u0026lt;/fileSets\u0026gt; \u0026lt;/assembly\u0026gt; 打包 执行mvn clean package -Dmaven.test.skip=true进行打包 然后等待片刻，打包完成\n打包后的压缩包 编译后的前端 ","permalink":"https://morz.cc/posts/technology/web/all-in-one/","summary":"背景 toB业务，最终交付的是一个客户端，需要提供前端控制页面，需要将前端也进行编译打包到同一个zip中，并且需要兼容jenkins，一步打包到位。\n原理 由于使用umi开发前端，所以正式使用之前先得进行编译。需要使用maven触发编译，打包为zip需要使用assembly插件\n再将js文件打包进行项目目录，由于是直接使用，没有nginx的容器， 需要spring-web充当容器，对前端资源进行转发。同时，spring-web也提供后端接口。\n实现 原理可行，开始实现\n目录结构 项目目录结构基于Maven项目，前端文件放哪都行，只要后面路径配置得一直就没啥问题。\n主要目录结构如下：\nbin \u0026hellip;启动脚本 config \u0026hellip;配置 assembly assembly.xml react(前端代码) src main \u0026hellip;其他文件 resources public \u0026hellip;其他文件 target pom.xml 配置 1. 修改umi配置输出目录 修改配置文件.umirc.ts， 添加配置项 outputPath: '../src/main/resources/public/'\n1 2 3 4 5 // .umirc.ts export default defineConfig({ // 其他配置 outputPath: \u0026#39;../src/main/resources/public/\u0026#39;, }); 2. 修改maven配置文件 添加react编译插件，用于编译umi项目 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.","title":"整合前端（umi）到后端（spring-boot）中"},{"content":"简介 用于记录一些乱七八糟的Widget（速查表）\n布局 Expanded 可以设置元素的占用空间比例大小。\n1 2 3 4 5 const Expanded({ Key key, int flex = 1, @required Widget child, }) flex 占比大小，默认是100% 多个Expanded并列时，单个Expanded占用空间为flex/sum(flex) child 即需要分配的Widget 例子:参考博客\n","permalink":"https://morz.cc/posts/technology/flutter/widget/","summary":"简介 用于记录一些乱七八糟的Widget（速查表）\n布局 Expanded 可以设置元素的占用空间比例大小。\n1 2 3 4 5 const Expanded({ Key key, int flex = 1, @required Widget child, }) flex 占比大小，默认是100% 多个Expanded并列时，单个Expanded占用空间为flex/sum(flex) child 即需要分配的Widget 例子:参考博客","title":"Widget记录"},{"content":"简介 正所谓，Flutter不能失去GetX，就像西方不是失去耶路撒冷。GetX作为Flutter的轮椅般的存在，是使用Flutter中必不可少的一个组件。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\nGitHub Pub Pub上的文档挺全的\n使用 ","permalink":"https://morz.cc/posts/technology/flutter/get/","summary":"简介 正所谓，Flutter不能失去GetX，就像西方不是失去耶路撒冷。GetX作为Flutter的轮椅般的存在，是使用Flutter中必不可少的一个组件。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\nGitHub Pub Pub上的文档挺全的\n使用 ","title":"GetX使用说明"},{"content":"现象 在本地运行测试好好的，发布到托管环境格式就乱了。\n检查 打开控制台后，发现console下有一条报错： 说css的校验失效，导致资源被锁定。所以格式全部都乱了。\n原因 由于Linux使用的是LF作为换行符，Windows使用CRLF作为换行符号。所以在跨环境时，换行符会发生变化。\n而由于hugo是每次都会重新生成css，导致跨环境之后的校验失效。\n解决方案 不跨环境（这不是废话） 找到校验的代码，我的是在这里，themes/PaperMod/layouts/partials/head.html\n当然，不同的主题可能位置不一样，但是结构应该和下面类似： 找到后有两个方法： 可以直接将74行的代码复制到第72行（也就是去掉了integrity校验） 也可以基于70行的判断，在项目配置文件中添加 params.assets.disableFingerprinting: true 来跳过校验 ","permalink":"https://morz.cc/posts/technology/hugo/integrity/","summary":"现象 在本地运行测试好好的，发布到托管环境格式就乱了。\n检查 打开控制台后，发现console下有一条报错： 说css的校验失效，导致资源被锁定。所以格式全部都乱了。\n原因 由于Linux使用的是LF作为换行符，Windows使用CRLF作为换行符号。所以在跨环境时，换行符会发生变化。\n而由于hugo是每次都会重新生成css，导致跨环境之后的校验失效。\n解决方案 不跨环境（这不是废话） 找到校验的代码，我的是在这里，themes/PaperMod/layouts/partials/head.html\n当然，不同的主题可能位置不一样，但是结构应该和下面类似： 找到后有两个方法： 可以直接将74行的代码复制到第72行（也就是去掉了integrity校验） 也可以基于70行的判断，在项目配置文件中添加 params.assets.disableFingerprinting: true 来跳过校验 ","title":"Hugo页面样式加载失败"},{"content":"简介 作为Flutter的半orm框架，Drift确实达到了好用的程度。本文不去对比其他框架，仅就使用过程中的一些坑或者技巧做一点小小的记录。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\n官方文档 GitHub Pub 使用 参考文档，先这样，然后这样，再那样，就好啦～\n1 2 # 注意：由于Dart不支持反射等操作，导致dao及相关类不能自动生成，需要手动执行以下指令进行生成。 $ dart run build_runner build 问题 Tables can\u0026rsquo;t override primaryKey and use autoIncrement() 设置自增就默认为主键，不用再额外指定主键了，但是指定了也只是警告，问题不大。 数据文件路径（安卓虚拟机）\n/data/user/0/{包名}/app_flutter/db.sqlite ","permalink":"https://morz.cc/posts/technology/flutter/drift/","summary":"简介 作为Flutter的半orm框架，Drift确实达到了好用的程度。本文不去对比其他框架，仅就使用过程中的一些坑或者技巧做一点小小的记录。\n相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。\n官方文档 GitHub Pub 使用 参考文档，先这样，然后这样，再那样，就好啦～\n1 2 # 注意：由于Dart不支持反射等操作，导致dao及相关类不能自动生成，需要手动执行以下指令进行生成。 $ dart run build_runner build 问题 Tables can\u0026rsquo;t override primaryKey and use autoIncrement() 设置自增就默认为主键，不用再额外指定主键了，但是指定了也只是警告，问题不大。 数据文件路径（安卓虚拟机）\n/data/user/0/{包名}/app_flutter/db.sqlite ","title":"Drift使用说明"},{"content":"前言 一直想自己搭建个博客做记录，偶然间了解到静态站。\n由于会Vue3，最开始打算使用vue-press的，但是调查发现，有三个主流的静态博客工具。也有现成的静态托管方案。\n于是乎，在对比了jekyll、hugo、hexo后，果断的选择了hugo（反正都没用过，就选星星最多的）。\n遂，域名，空间，博客一把梭。\n记录下 Hogu 的安装过程\n安装 当然是看 官方安装文档 啊，不然真的看博客啊。\n配置 配置就有得说了，官网的东西有点乱。\n使用 我还不太熟，用熟了再补充\n","permalink":"https://morz.cc/posts/technology/hugo/setup/","summary":"前言 一直想自己搭建个博客做记录，偶然间了解到静态站。\n由于会Vue3，最开始打算使用vue-press的，但是调查发现，有三个主流的静态博客工具。也有现成的静态托管方案。\n于是乎，在对比了jekyll、hugo、hexo后，果断的选择了hugo（反正都没用过，就选星星最多的）。\n遂，域名，空间，博客一把梭。\n记录下 Hogu 的安装过程\n安装 当然是看 官方安装文档 啊，不然真的看博客啊。\n配置 配置就有得说了，官网的东西有点乱。\n使用 我还不太熟，用熟了再补充","title":"安装Hugo"}]
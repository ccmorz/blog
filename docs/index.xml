<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>沫子</title>
    <link>https://morz.cc/</link>
    <description>Recent content on 沫子</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 06 Oct 2023 10:24:36 +0800</lastBuildDate><atom:link href="https://morz.cc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gpg小记</title>
      <link>https://morz.cc/posts/technology/web/gpg-tips/</link>
      <pubDate>Fri, 06 Oct 2023 10:24:36 +0800</pubDate>
      
      <guid>https://morz.cc/posts/technology/web/gpg-tips/</guid>
      <description>从公钥服务器接收失败 命令：
1 apt-key adv --keyserver keyserver.ubuntu.com --recv xxxx 错误提示：
gpg: keyserver receive failed: Server indicated a failure
gpg: 从公钥服务器接收失败：Server indicated a failure
解决方案
由于keyserver.ubuntu.com开放80端口，需要手动指定，否则会使用默认端口11371 添加协议名和端口后为： 1 apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv xxxx 如果方案1中继续报错，可能是由于域名解析失败导致，可以在/etc/resolv.conf中修改dns配置为 1 nameserver 8.8.8.8 # Google DNS 或 1 nameserver 1.1.1.1 # Cloudflare 如果不可修改DNS或者修改后依旧失败，则可以使用ping来获取keyserver.ubuntu.com的真实IP，再替换到域名 1 2 ping keyserver.ubuntu.com #获取ip，我获取的是 185.125.188.27 apt-key adv --keyserver hkp://185.125.188.27:80 --recv xxxx #使用IP替换域名 </description>
    </item>
    
    <item>
      <title>备忘录</title>
      <link>https://morz.cc/posts/technology/utils/notebook/</link>
      <pubDate>Wed, 09 Aug 2023 09:52:53 +0800</pubDate>
      
      <guid>https://morz.cc/posts/technology/utils/notebook/</guid>
      <description>一些网址 zlib</description>
    </item>
    
    <item>
      <title>随机森林</title>
      <link>https://morz.cc/posts/ml/random-forest/</link>
      <pubDate>Fri, 04 Aug 2023 18:44:15 +0800</pubDate>
      
      <guid>https://morz.cc/posts/ml/random-forest/</guid>
      <description>一、介绍 在有背景和明确目的的情况下，一个决策的制定，往往会依赖于多个环境条件或其衍生条件，各个条件间可能互相影响和依赖，而随机森林就是将各个条件对结果的影响具象化表现。
二、组成 从一个简单的例子开始：
1 和女朋友约会，需要到达约会地点。 上面这个描述中，我们可以很清楚的知道。背景是约会，而目则是到达约会地点。
基于正常情况（不考虑外星人），实现这个目标，我们有以下策略：
公共交通 步行 自驾 打车 骑车 那么如何选择策略呢？可能有以下几个因素：
天气 时间宽裕程度 交通便利性 目的地类型 约会计划 不同的条件会产生不同的决策，而不同的人基于自身因素也会对不同的条件产生不同的权重。各种权重和条件互相影响，最终导致选择了某一个决策。
一个决策的产生，由环境背景、目标、条件及衍生条件、实现方案组成。
而这些元素的定义域与值域组成了随机森林，使用随机森林可以预测在特定元素条件下最合适的决策。
常用方法 </description>
    </item>
    
    <item>
      <title>技术面基本图形</title>
      <link>https://morz.cc/posts/quant/illustrator/</link>
      <pubDate>Fri, 04 Aug 2023 13:57:15 +0800</pubDate>
      
      <guid>https://morz.cc/posts/quant/illustrator/</guid>
      <description>头肩顶 头肩底 上升三角 下降三角 等边三角 旗形 箱体 缺口 </description>
    </item>
    
    <item>
      <title>技术面基本指标</title>
      <link>https://morz.cc/posts/quant/factor/</link>
      <pubDate>Fri, 04 Aug 2023 13:57:15 +0800</pubDate>
      
      <guid>https://morz.cc/posts/quant/factor/</guid>
      <description>MACD 量价位图 加权平均线 K线 </description>
    </item>
    
    <item>
      <title>各种各样的配置文件类型</title>
      <link>https://morz.cc/posts/technology/utils/config/</link>
      <pubDate>Fri, 04 Aug 2023 10:50:34 +0800</pubDate>
      
      <guid>https://morz.cc/posts/technology/utils/config/</guid>
      <description>一些常用配置文件类型介绍 适用场景只是个建议，理论来说，所有场景都行（力大砖飞，手动无敌）
但是合适的场景会更省心一点。
后缀为默认后缀，本质上都是文本类型文件，一般服务器上都是叫.conf,具体看打开之后的格式。
ini 介绍：最早的配置文件格式，解析简单，由win开始广泛使用
后缀：.ini
适用：层次简单的配置项，一般只有一层嵌套。
1 2 3 4 5 6 7 ; 注释用分号表示，由节、键、值 组成 ; 节类似于作用域，没有明确的结尾， [sction1] ; 节 key=vaue ; 键=值 [sction2] ; 第二个节开始 key=vaue ; 键=值 xml 介绍：最严格，程序解析简单，但是由于存在大量的关闭标签，导致新增配置项比较麻烦，配置效率低
后缀：.xml
建议：适用于默认配置或者存在自动格式化的场景(如果愿意手动对齐，放在服务器也是极好的)
1 2 3 4 5 6 7 8 9 &amp;lt;!-- 注释是文本需要被左右两边包裹 --&amp;gt; &amp;lt;!-- 配置由节点组成，节点下可以是数值，也可以是节点，但是选择一种 --&amp;gt; &amp;lt;key&amp;gt; &amp;lt;aaa&amp;gt;v1&amp;lt;/aaa&amp;gt; &amp;lt;aaa&amp;gt;v2&amp;lt;/aaa&amp;gt; &amp;lt;bbb&amp;gt; &amp;lt;ccc&amp;gt;ccc&amp;lt;/ccc&amp;gt; &amp;lt;/bbb&amp;gt; &amp;lt;/key&amp;gt; property 介绍：主流配置方式，一行一个,结构简单，程序读取方便，存在嵌套结构时会出现大量重复前缀
后缀：.property
建议：比较适用于在服务器环境，或者简单基础配置解析的场景，适合配置项的新增和删除
1 2 3 4 5 # 以#开始的行为注释行 a=1 a.</description>
    </item>
    
    <item>
      <title>整合前端（umi）到后端（spring-boot）中</title>
      <link>https://morz.cc/posts/technology/web/all-in-one/</link>
      <pubDate>Fri, 04 Aug 2023 10:50:34 +0800</pubDate>
      
      <guid>https://morz.cc/posts/technology/web/all-in-one/</guid>
      <description>背景 toB业务，最终交付的是一个客户端，需要提供前端控制页面，需要将前端也进行编译打包到同一个zip中，并且需要兼容jenkins，一步打包到位。
原理 由于使用umi开发前端，所以正式使用之前先得进行编译。需要使用maven触发编译，打包为zip需要使用assembly插件
再将js文件打包进行项目目录，由于是直接使用，没有nginx的容器， 需要spring-web充当容器，对前端资源进行转发。同时，spring-web也提供后端接口。
实现 原理可行，开始实现
目录结构 项目目录结构基于Maven项目，前端文件放哪都行，只要后面路径配置得一直就没啥问题。
主要目录结构如下：
bin &amp;hellip;启动脚本 config &amp;hellip;配置 assembly assembly.xml react(前端代码) src main &amp;hellip;其他文件 resources public &amp;hellip;其他文件 target pom.xml 配置 1. 修改umi配置输出目录 修改配置文件.umirc.ts， 添加配置项 outputPath: &#39;../src/main/resources/public/&#39;
1 2 3 4 5 // .umirc.ts export default defineConfig({ // 其他配置 outputPath: &amp;#39;../src/main/resources/public/&amp;#39;, }); 2. 修改maven配置文件 添加react编译插件，用于编译umi项目 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.</description>
    </item>
    
    <item>
      <title>Widget记录</title>
      <link>https://morz.cc/posts/technology/flutter/widget/</link>
      <pubDate>Sun, 23 Jul 2023 22:20:15 +0800</pubDate>
      
      <guid>https://morz.cc/posts/technology/flutter/widget/</guid>
      <description>简介 用于记录一些乱七八糟的Widget（速查表）
布局 Expanded 可以设置元素的占用空间比例大小。
1 2 3 4 5 const Expanded({ Key key, int flex = 1, @required Widget child, }) flex 占比大小，默认是100% 多个Expanded并列时，单个Expanded占用空间为flex/sum(flex) child 即需要分配的Widget 例子:参考博客</description>
    </item>
    
    <item>
      <title>GetX使用说明</title>
      <link>https://morz.cc/posts/technology/flutter/get/</link>
      <pubDate>Sun, 23 Jul 2023 21:40:15 +0800</pubDate>
      
      <guid>https://morz.cc/posts/technology/flutter/get/</guid>
      <description>简介 正所谓，Flutter不能失去GetX，就像西方不是失去耶路撒冷。GetX作为Flutter的轮椅般的存在，是使用Flutter中必不可少的一个组件。
相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。
GitHub Pub Pub上的文档挺全的
使用 </description>
    </item>
    
    <item>
      <title>Hugo页面样式加载失败</title>
      <link>https://morz.cc/posts/technology/hugo/integrity/</link>
      <pubDate>Thu, 20 Jul 2023 16:12:34 +0800</pubDate>
      
      <guid>https://morz.cc/posts/technology/hugo/integrity/</guid>
      <description>现象 在本地运行测试好好的，发布到托管环境格式就乱了。
检查 打开控制台后，发现console下有一条报错： 说css的校验失效，导致资源被锁定。所以格式全部都乱了。
原因 由于Linux使用的是LF作为换行符，Windows使用CRLF作为换行符号。所以在跨环境时，换行符会发生变化。
而由于hugo是每次都会重新生成css，导致跨环境之后的校验失效。
解决方案 不跨环境（这不是废话） 找到校验的代码，我的是在这里，themes/PaperMod/layouts/partials/head.html
当然，不同的主题可能位置不一样，但是结构应该和下面类似： 找到后有两个方法： 可以直接将74行的代码复制到第72行（也就是去掉了integrity校验） 也可以基于70行的判断，在项目配置文件中添加 params.assets.disableFingerprinting: true 来跳过校验 </description>
    </item>
    
    <item>
      <title>Drift使用说明</title>
      <link>https://morz.cc/posts/technology/flutter/drift/</link>
      <pubDate>Wed, 19 Jul 2023 23:40:15 +0800</pubDate>
      
      <guid>https://morz.cc/posts/technology/flutter/drift/</guid>
      <description>简介 作为Flutter的半orm框架，Drift确实达到了好用的程度。本文不去对比其他框架，仅就使用过程中的一些坑或者技巧做一点小小的记录。
相关文档 最权威的当然是各种官网的文档，建议优先参考，本文不赘述安装、导入过程。
官方文档 GitHub Pub 使用 参考文档，先这样，然后这样，再那样，就好啦～
1 2 # 注意：由于Dart不支持反射等操作，导致dao及相关类不能自动生成，需要手动执行以下指令进行生成。 $ dart run build_runner build 问题 Tables can&amp;rsquo;t override primaryKey and use autoIncrement() 设置自增就默认为主键，不用再额外指定主键了，但是指定了也只是警告，问题不大。 数据文件路径（安卓虚拟机）
/data/user/0/{包名}/app_flutter/db.sqlite </description>
    </item>
    
    <item>
      <title>安装Hugo</title>
      <link>https://morz.cc/posts/technology/hugo/setup/</link>
      <pubDate>Wed, 12 Jul 2023 16:12:34 +0800</pubDate>
      
      <guid>https://morz.cc/posts/technology/hugo/setup/</guid>
      <description>前言 一直想自己搭建个博客做记录，偶然间了解到静态站。
由于会Vue3，最开始打算使用vue-press的，但是调查发现，有三个主流的静态博客工具。也有现成的静态托管方案。
于是乎，在对比了jekyll、hugo、hexo后，果断的选择了hugo（反正都没用过，就选星星最多的）。
遂，域名，空间，博客一把梭。
记录下 Hogu 的安装过程
安装 当然是看 官方安装文档 啊，不然真的看博客啊。
配置 配置就有得说了，官网的东西有点乱。
使用 我还不太熟，用熟了再补充</description>
    </item>
    
    
    
  </channel>
</rss>
